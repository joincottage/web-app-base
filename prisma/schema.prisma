// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  shadowDatabaseUrl    = env("SHADOW_DB_URL")
  referentialIntegrity = "prisma"

}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]

}

model User {
  id               Int      @id @default(autoincrement())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  auth_id          String   @unique
  email            String   @unique
  name             String?
  img_url          String?
  bio              String?
  skills           String?
  type             String?
  hasJoinedDiscord Boolean?
  // Encrypted, needs to be decrypted to be used
  stripeAccountId  String?
  stripeCustomerId String?
  tasks            Task[]
  client           Client?  @relation(fields: [clientId], references: [id])
  clientId         Int?
}

model Task {
  id               Int      @id @default(autoincrement())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  clientName       String?
  clientImgUrl     String?
  clientCategoryId String?
  name             String?
  shortDesc        String?
  longDesc         String?  @db.VarChar(5000)
  type             String?
  skills           String?
  datePosted       String?
  status           String?
  price            Int?
  freelancer       User?    @relation(fields: [userId], references: [id])
  userId           Int?
  client           Client   @relation(fields: [clientId], references: [id])
  clientId         Int
  userImgUrl       String?
  discordChannelId String?
}

model Client {
  id                Int      @id @default(autoincrement())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  name              String?
  logoUrl           String?
  userEmailOfOwner  String
  discordCategoryId String?
  tasks             Task[]
  users             User[]
}

model JobPost {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  jobName        String
  jobPostUrl     String?
  price          String?
  timeCommitment String?
  companyLogoUrl String?
  companyName    String
  sourceName     String?
  sourceUrl      String?
  sourceLogoUrl  String?
  createdBy      String
  category       String?
}
